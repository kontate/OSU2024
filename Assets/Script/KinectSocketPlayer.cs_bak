// Original script is KinectRecorderPlayer in Kinect V2 Example
/* And modified by T.Narumi for MagicMirror
     Playing means that a server receives Kinect data from client.
     Recording meanse that a client sends Kinect data to server.
 */

using UnityEngine;
using UnityEngine.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net.NetworkInformation;

/// <summary>
/// Kinect recorder and player is the component that manages recording and replaying of Kinect body-data files.
/// </summary>
public class KinectSocketPlayer : MonoBehaviour 
{
  //	[Tooltip("Path to the file used to record or replay the recorded data.")]
	//	public string filePath = "BodyRecording.txt";
	//	public string serverAddr = "";

	[Tooltip("UI-Text to display information messages.")]
	public UnityEngine.UI.Text infoText;

	[Tooltip("Whether to start playing the recorded data, right after the scene start.")]
	public bool serverAtStart = false;

  //        public static KinectSocketPlayer Instance;
        private int _num = -9999;  // 安易な初期値
  //	private int Max_clients = 10; // maximum number of clients supported as a server
	private int Max_char_server = 5; // maximum number of characters supported as a server
  //	private string _pmsg = ""; // play message from client
        private string[] _pmsg = new string[10 /* Max_clients */]; // play message from client
	private int _pmsg_max = 0; // current number of clients
	private string _rmsg = ""; // record message to server
        private int num_packed_persons = 0;// total number of packed persons from clients

	// singleton instance of the class
	private static KinectSocketPlayer instance = null;
	
	// whether it is recording or playing saved data at the moment
	private bool isRecording = false;
	private bool isPlaying = false;

	// reference to the KM
	private KinectManager manager = null;

	// time variables used for recording and playing
	private long liRelTime = 0;
  //	private float fStartTime = 0f;
	public float fStartTime = 0f;
  //	private float fCurrentTime = 0f;
	public float fCurrentTime = 0f;
  //	private float fOffsetTime = 0f;
  	public float fOffsetTime = 0f;
	private int fCurrentFrame = 0;

	// player variables
  //	private StreamReader fileReader = null;
	private float fPlayTime = 0f;
	private string sPlayLine = string.Empty;


	/// <summary>
	/// Gets the singleton KinectSocketPlayer instance.
	/// </summary>
	/// <value>The KinectSocketPlayer instance.</value>
	public static KinectSocketPlayer Instance
	{
		get
		{
			return instance;
		}
	}

	
//	public void RecordToggleValueChanged(bool bOn)
//	{
//		if(!isRecording)
//		{
//			StartRecording();
//		}
//		else
//		{
//			StopRecordingOrPlaying();
//		}
//	}
//
//	public void PlayToggleValueChanged(bool bOn)
//	{
//		if(!isPlaying)
//		{
//			StartPlaying();
//		}
//		else
//		{
//			StopRecordingOrPlaying();
//		}
//	}


	// starts recording
	public bool StartRecording()
	{
		if(isRecording)
			return false;

		isRecording = true;

		// avoid recording an playing at the same time
		if(isPlaying && isRecording)
		{
			CloseFile();
			isPlaying = false;
			
			Debug.Log("Playing stopped.");
		}
		
		// stop recording if there is no file name specified
		//		if(filePath.Length == 0)
		/*		if(serverAddr.Length == 0)
		{
			isRecording = false;

			Debug.LogError("No server address is specified.");
			if(infoText != null)
			{
				infoText.text = "No server address is specified.";
			}
			}*/
		
		if(isRecording)
		{
			Debug.Log("Client started.");
			if(infoText != null)
			{
				infoText.text = "Client staring... Say 'Stop' to stop the recorder.";
			}
			
			// delete the old csv file
			/*			if(filePath.Length > 0 && File.Exists(filePath))
			{
				File.Delete(filePath);
				}*/
			// T.Narumi: connect to server 
			
			// initialize times
			fStartTime = fCurrentTime = Time.time;
			fCurrentFrame = 0;
		}

		return isRecording;
	}


	// starts playing
	public bool StartPlaying()
	{
		if(isPlaying)
			return false;

		isPlaying = true;

		// avoid recording an playing at the same time
		if(isRecording && isPlaying)
		{
			isRecording = false;
			Debug.Log("Recording stopped.");
		}
		
		// stop playing if there is no file name specified
		//		if(filePath.Length == 0 || !File.Exists(filePath))
		if(false) // T.Narumi: if server is not running
		{
			isPlaying = false;
			Debug.LogError("No server is running.");

			if(infoText != null)
			{
				infoText.text = "No server is running.";
			}
		}
		
		if(isPlaying)
		{
			Debug.Log("Playing started.");
			if(infoText != null)
			{
				infoText.text = "Playing... Say 'Stop' to stop the player.";
			}

			// initialize times
			fStartTime = fCurrentTime = Time.time;
			fOffsetTime = 0;
			fCurrentFrame = -1;

			// open the file and read a line
#if !UNITY_WSA
			//			fileReader = new StreamReader(filePath);
#endif
			ReadLineFromFile();
			
			// enable the play mode
			if(manager)
			{
				manager.EnablePlayMode(true);
			}
		}

		return isPlaying;
	}


	// stops recording or playing
	public void StopRecordingOrPlaying()
	{
		if(isRecording)
		{
			isRecording = false;

			Debug.Log("Recording stopped.");
			if(infoText != null)
			{
				infoText.text = "Recording stopped.";
			}
		}

		if(isPlaying)
		{
			// close the file, if it is playing
			CloseFile();
			isPlaying = false;

			Debug.Log("Playing stopped.");
			if(infoText != null)
			{
				infoText.text = "Playing stopped.";
			}
		}

		if(infoText != null)
		{
			infoText.text = "Say: 'Record' to start the recorder, or 'Play' to start the player.";
		}
	}

	// returns if file recording is in progress at the moment
	public bool IsRecording()
	{
		return isRecording;
	}

	// returns if file-play is in progress at the moment
	public bool IsPlaying()
	{
		return isPlaying;
	}
	

	// ----- end of public functions -----
	
	void Awake()
	{
		instance = this;
	}

	void Start()
	{
	  // Added by T.Narumi
	  int i;
	  for(i=0;i<10 /* Max_clients */;i++){
	    _pmsg[i]="";
	  }
		if(infoText != null)
		{
			infoText.text = "Say: 'Record' to start the recorder, or 'Play' to start the player.";
		}

		if(!manager)
		{
			manager = KinectManager.Instance;
		}
		else
		{
			Debug.Log("KinectManager not found, probably not initialized.");

			if(infoText != null)
			{
				infoText.text = "KinectManager not found, probably not initialized.";
			}
		}
		
		if(serverAtStart)
		{
			StartPlaying();
		}
		else{
		        StartRecording();
		}
	}

	void Update () 
	{
		if(isRecording)
		{
			// save the body frame, if any
			if(manager && manager.IsInitialized())
			{
				const char delimiter = ',';
				string sBodyFrame = manager.GetBodyFrameData(ref liRelTime, ref fCurrentTime, delimiter);

				if(sBodyFrame.Length > 0)
				{
#if !UNITY_WSA
				  /*					using(StreamWriter writer = File.AppendText(filePath))
					{
						string sRelTime = string.Format("{0:F3}", (fCurrentTime - fStartTime));
						writer.WriteLine(sRelTime + "|" + sBodyFrame);

						if(infoText != null)
						{
							infoText.text = string.Format("Recording @ {0}s., frame {1}. Say 'Stop' to stop the player.", sRelTime, fCurrentFrame);
						}

						fCurrentFrame++;
					}
				  */
				  // T.Narumi: send packet to the server
				  string sRelTime = string.Format("{0:F3}", (fCurrentTime - fStartTime));
				  string msg = sRelTime + "|" + sBodyFrame + "\n";
				  //				  Debug.Log(msg);
				  _rmsg = msg;
#else
				  string sRelTime = string.Format("{0:F3}", (fCurrentTime - fStartTime));
				  string msg = sRelTime + "|" + sBodyFrame + "\n";
				  //				  Debug.Log(msg);
				  _rmsg = msg;
#endif
				}
			}
		}

		if(isPlaying)
		{
			// wait for the right time
			fCurrentTime = Time.time;
			float fRelTime = fCurrentTime - fStartTime + fOffsetTime;

			//			if(sPlayLine != null && fRelTime >= fPlayTime)
			if(sPlayLine != null) // T.Narumi: time is not used
			{
				// then play the line
				if(manager && sPlayLine.Length > 0)
				{
					manager.SetBodyFrameData(sPlayLine);
				}

				// and read the next line
				ReadLineFromFile();

				/*
				// skip several lines (T.Narumi)
				if(fRelTime >= fPlayTime + 30f){
					for(int i=0; i<100; i++) ReadLineFromFile();
				} else if(fRelTime >= fPlayTime + 3f){
					for(int i=0; i<10; i++) ReadLineFromFile();
					}*/
			}

			if(sPlayLine == null)
			{
				// finish playing, if we reached the EOF
				StopRecordingOrPlaying();
			}

			if(Input.GetKeyDown(KeyCode.RightArrow)){
				fOffsetTime += 10f;
			}

			if(infoText != null)
			{
				infoText.text = "Playing... msg=" + _pmsg;
			}
		}
	}

	void OnDestroy()
	{
		// don't forget to release the resources
		CloseFile();
		isRecording = isPlaying = false;
	}

	// reads a line from the file
	private bool ReadLineFromFile()
	{
	  /*		if(fileReader == null)
			return false;*/

		// read a line
	        //		sPlayLine = fileReader.ReadLine();
	  //	        sPlayLine = _pmsg; // T.Narumi: get line from client
	        sPlayLine = PackBodyData(); // T.Narumi: get line from client
		if(sPlayLine == null)
			return false;

		// extract the unity time and the body frame
		char[] delimiters = { '|' };
		string[] sLineParts = sPlayLine.Split(delimiters);

		if(sLineParts.Length >= 2)
		{
			float.TryParse(sLineParts[0], out fPlayTime);
			sPlayLine = sLineParts[1];
			fCurrentFrame++;

			if(infoText != null)
			{
				infoText.text = string.Format("Playing @ {0:F3}s., frame {1}. , TargetTime @{2:F3}s.", fPlayTime, fCurrentFrame, fOffsetTime + Time.time - fStartTime);
			}

			return true;
		}

		return false;
	}

	// close the file and disable the play mode
	private void CloseFile()
	{
		// close the file
	  /*		if(fileReader != null)
		{
			fileReader.Dispose();
			fileReader = null;
			}*/
	  // T.Narumi: disconnect from client

		// disable the play mode
		if(manager)
		{
			manager.EnablePlayMode(false);
		}
	}

        // 受信した数値セット
        public void SetNum(int n){
            _num = n;
        }
  
        // copy received message
        public void SetPlayMessage(int client_count, int client_index, string msg){
	  if(client_index<10 /* Max_clients */){
            _pmsg[client_index] = msg;
	    _pmsg_max = client_count;
	  } else {
	    Debug.LogError("Too many clients");
		Utils.ForceCrash( ForcedCrashCategory.FatalError );
		Utils.ForceCrash( ForcedCrashCategory.Abort );
	  }
        }
  
        // copy sent message
        public string GetRecordMessage(){
	  // Added by T.Narumi for aditional person's body data
	  //	    Debug.Log("GetRecordMessage is called");
#if false
	  List<string> rmsg2 = new List<string>();
	  char[] delimiters = { ',' };
	  string[] sLineParts = _rmsg.Split(delimiters);
	  int i;
	  for(i=0; i<5; i++){
	    rmsg2.Add(sLineParts[i]);// header and person 0
	  }
	  for(i=5; i<5+102; i++){    // person 1: actual data
	    rmsg2.Add(sLineParts[i]);
	  }
	  if(sLineParts[5+102] != "0"){//if(false){
	    for(i=5+102; i<5+102+102; i++){// person 2: actual data
	      rmsg2.Add(sLineParts[i]);
	      //	      if(i==6) rmsg2.Add("72057594037928965"); else rmsg2.Add(sLineParts[i-102]);
	      //if(i==6) rmsg2.Add("72057594037928964"); else rmsg2.Add(sLineParts[i]);
	    }
	    /*	    for(i=5+102; i<5+102+102; i++){// person 3: copy from person 2
	      rmsg2.Add(sLineParts[i]);
	      }*/
	    rmsg2.Add("0");          // person 3
	  } else {
	    rmsg2.Add("0");          // person 2
	    rmsg2.Add("0");          // person 3
	  }
	  rmsg2.Add("0");            // person 4
	  rmsg2.Add("0\n");            // person 5
	  return string.Join(",",rmsg2.ToArray());
#else	  
	  return _rmsg;
#endif	  
        }

  // Added by T.Narumi: make one string from _pmsg[]
        private string PackBodyData(){
	  int i, j, c, b, n;
	  long t;
	  List<string> pmsg2 = new List<string>();
	  char[] delimiters = { ',' };
	  string[] sLineParts;
	  string rets="0.0|kb,18264576583100000,6,25,0,0,0,0,0,0";
	  int shiftp = 0;// 0 - maximum 6 persons, 1 - maximum 5 persons
	  c=0;
	  pmsg2.Add("0.0|kb");             // time from application start
	  pmsg2.Add("18264576583100000");  // unix time
	  pmsg2.Add("6");                  // number of tracked person
	  pmsg2.Add("25");                 // number of body nodes
	  for(i=0; i<shiftp; i++) pmsg2.Add("0");
	  for(i=0; i<_pmsg_max; i++){
	    if(_pmsg[i]!=""){
	      sLineParts = _pmsg[i].Split(delimiters);
		  if(sLineParts.Length<9) Debug.LogError("sLineParts is too few" + _pmsg[i]);
	      j=4; 
	      for(b=shiftp; b<6; b++){ // 6 body data can exist at maximum
		if(sLineParts[j++]!="0"){ // exist body data
		  c++;// increase the number of body data
		  if(c>=7-shiftp){
		    Debug.LogError("Too many body data");
		    return rets;
		  }
		  pmsg2.Add(sLineParts[j-1]);// flag of body data existance
//		  t = (long.Parse(sLineParts[j++]) % 100)+i*100;// my userid
		  t = c*1000; j++;// my userid
		  pmsg2.Add(t.ToString());// body user id
		  for(n=0; n<25; n++){    // 25 is number of body nodes
		    pmsg2.Add(sLineParts[j++]);// flag if body node exist(1 or 2) or not(0)
		    if(sLineParts[j-1]!="0"){
		      pmsg2.Add(sLineParts[j++]);// x
		      pmsg2.Add(sLineParts[j++]);// y
		      pmsg2.Add(sLineParts[j++]);// z
		    }
		  }
		}
	      }
	    }
	  }
	  for(j=c; j<6; j++) pmsg2.Add("0");// flag of no body data existance
	  rets = string.Join(",",pmsg2.ToArray());
/* 	  Debug.Log("Packed " + c + " persons: " + rets);
	  {
		  var ids = manager.GetAllUserIds().ToArray();
		  for(j=0; j<ids.Length; j++){
			  Debug.Log(" alUserIds[" + j + "]=" + ids[j]);
		  }
	  }*/

/*	  if(num_packed_persons != c){
//		manager.RefreshAvatarUserIds();
 		if(c>2 || c-num_packed_persons>=2){
		  Debug.LogError("Too many packed data, c=" + c + " num_packed_persons=" + num_packed_persons);
		}
	  }*/ 
//	  manager.RefreshAvatarUserIds();
	  num_packed_persons = c;
/* 	  int[] pindex = new int[10];
	  for(j=0;j<num_packed_persons;j++){
		  pindex[j] = manager.Characters[j].GetComponent<AvatarController>().playerIndex;
	  }*/
	  return rets;
	}
}
